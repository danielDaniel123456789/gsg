function showEditHoursModal(userId, name) {
  if (isEditHoursModalOpen) return; // Evitar abrir múltiples veces el modal
  isEditHoursModalOpen = true;

  getDoc(doc(db, "usuarios", userId))
      .then((userDoc) => {
          if (userDoc.exists()) {
              const horas = userDoc.data().horas || [];

              const periodRates = {
                  "Normal ₡1400.31": 1400.31,
                  "Diurnas ₡2241.31 (5:00am a las 19:00pm)": 2241.31,
                  "Mixtas ₡2561.50 (19:00 a las 22:00)": 2561.50,
                  "Nocturnas ₡2988.41 (22:00 a las 5:00am)": 2988.41
              };

              const horasOptions = `
                  <table class="table">
                      <thead>
                          <tr>
                              <th>Horas</th>
                              <th>Subtotal</th>
                              <th>Modificar</th>
                              <th>Inserto</th>
                              <th>Fecha</th>
                              <th>Hora Inicio</th>
                          </tr>
                      </thead>
                      <tbody>
                          ${horas
                              .map((h, index) => {
                                  const date = new Date(h.fecha);
                                  const formattedDate = h.fecha ? date.toISOString().split('T')[0] : '';
                                  const formattedTime = h.hora || "00:00";

                                  const periodOptions = [
                                      "Normal ₡1400.31",
                                      "Diurnas ₡2241.31 (5:00am a las 19:00pm)",
                                      "Mixtas ₡2561.50 (19:00 a las 22:00)",
                                      "Nocturnas ₡2988.41 (22:00 a las 5:00am)"
                                  ];

                                  const periodSelectOptions = periodOptions
                                      .map(option => `<option value="${option}" ${h.periodo === option ? "selected" : ""}>${option}</option>`)
                                      .join('');

                                  // Calcular el subtotal
                                  const periodRate = periodRates[h.periodo] || 0;
                                  const subtotal = h.horas ? h.horas * periodRate : 0;

                                  return `
                                      <tr>
                                          <td>
                                              <input type="number" id="edit-hours-${index}" class="form-control" value="${h.horas || ''}" placeholder="Horas" min="1">
                                          </td>
                                          <td>
                                              <input type="text" id="subtotal-${index}" class="form-control" value="₡${subtotal.toFixed(2)}" readonly>
                                          </td>
                                          <td>
                                              <select id="edit-period-${index}" class="form-control">
                                                  ${periodSelectOptions}
                                              </select>
                                          </td>
                                          <td>
                                              <button type="button" class="btn btn-info" onclick="showPeriodDetails(${index}, '${h.horas}', '${h.periodo}', '${h.fecha}', '${h.hora}', '${userId}', '${name}')">
                                                  ${h.periodo ? h.periodo.charAt(0) : 'N/A'}
                                              </button>
                                          </td>
                                          <td>
                                              <input type="date" id="edit-date-${index}" class="form-control" value="${formattedDate}">
                                          </td>
                                          <td>
                                              <input type="time" id="edit-time-${index}" class="form-control" value="${formattedTime}">
                                          </td>
                                      </tr>
                                  `;
                              })
                              .join('')}
                      </tbody>
                  </table>
              `;

              Swal.fire({
                  title: `Editar Horas ${name}`,
                  html: horasOptions,
                  confirmButtonText: "Guardar Cambios",
                  showCancelButton: true,
                  width: "100%", // Hace que el modal ocupe todo el ancho
                  preConfirm: () => {
                      const updatedHours = [];
                      let total = 0;
                      for (let index = 0; index < horas.length; index++) {
                          const newHours = document.getElementById(`edit-hours-${index}`).value.trim();
                          const newPeriod = document.getElementById(`edit-period-${index}`).value;
                          const newDate = document.getElementById(`edit-date-${index}`).value.trim();
                          const newTime = document.getElementById(`edit-time-${index}`).value.trim();

                          if (!newHours || isNaN(newHours) || newHours <= 0) {
                              Swal.showValidationMessage("Por favor, ingresa un número válido de horas");
                              return false;
                          }

                          if (!newPeriod) {
                              Swal.showValidationMessage("Por favor, selecciona un periodo");
                              return false;
                          }

                          if (!newDate) {
                              Swal.showValidationMessage("Por favor, selecciona una fecha");
                              return false;
                          }

                          if (!newTime) {
                              Swal.showValidationMessage("Por favor, ingresa una hora");
                              return false;
                          }

                          // Calcular el subtotal
                          const periodRate = periodRates[newPeriod] || 0;
                          const subtotal = parseInt(newHours) * periodRate;
                          total += subtotal;

                          updatedHours.push({
                              horas: parseInt(newHours),
                              periodo: newPeriod,
                              fecha: new Date(`${newDate}T${newTime}`).toISOString(),
                              hora: newTime,
                              subtotal: subtotal
                          });
                      }

                      // Mostrar el total al final
                      updatedHours.push({
                          horas: 'Total',
                          periodo: '',
                          fecha: '',
                          hora: '',
                          subtotal: total
                      });

                      return updatedHours;
                  },
              }).then((result) => {
                  isEditHoursModalOpen = false; // Reiniciar bandera cuando se cierra
                  if (result.isConfirmed) {
                      updateHoursForUser(userId, result.value)
                          .then(() => {
                              // Mostrar mensaje de éxito
                              const successMessage = document.getElementById('success-message');
                              successMessage.style.display = 'block'; // Mostrar el div de éxito

                              // Esperar 3 segundos y luego ocultar el mensaje de éxito
                              setTimeout(() => {
                                  successMessage.style.display = 'none'; // Ocultar el div de éxito

                                  // Llamar a showEditHoursModal después de 3 segundos
                                  showEditHoursModal(userId, name);
                              }, 1000); // Esperar 3 segundos antes de ocultar el mensaje y recargar el modal
                          })
                          .catch((error) => {
                              console.error("Error al actualizar las horas: ", error);
                              Swal.fire("Error", "No se pudieron guardar los cambios", "error");
                          });
                  }
              });
          } else {
              isEditHoursModalOpen = false;
              Swal.fire("Error", "Usuario no encontrado", "error");
          }
      })
      .catch((error) => {
          isEditHoursModalOpen = false;
          console.error("Error al obtener el documento: ", error);
          Swal.fire("Error", "No se pudieron cargar las horas extra", "error");
      });
}
